//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/GoLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GoLangParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IGoLangVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] GoLangParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] GoLangParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleStatement([NotNull] GoLangParser.SimpleStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.varDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDeclaration([NotNull] GoLangParser.VarDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.funcDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncDeclaration([NotNull] GoLangParser.FuncDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.funcParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncParams([NotNull] GoLangParser.FuncParamsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.funcParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncParam([NotNull] GoLangParser.FuncParamContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.invoke"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvoke([NotNull] GoLangParser.InvokeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.invokeParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvokeParams([NotNull] GoLangParser.InvokeParamsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.invokeMethod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvokeMethod([NotNull] GoLangParser.InvokeMethodContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.implicitDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImplicitDeclaration([NotNull] GoLangParser.ImplicitDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] GoLangParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.compoundAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundAssignment([NotNull] GoLangParser.CompoundAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.incDecStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncDecStatement([NotNull] GoLangParser.IncDecStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.exprStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprStatement([NotNull] GoLangParser.ExprStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] GoLangParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] GoLangParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] GoLangParser.BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinueStatement([NotNull] GoLangParser.ContinueStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchStatement([NotNull] GoLangParser.SwitchStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] GoLangParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.forCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForCondition([NotNull] GoLangParser.ForConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.forClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForClause([NotNull] GoLangParser.ForClauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.forRange"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForRange([NotNull] GoLangParser.ForRangeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.initStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitStmt([NotNull] GoLangParser.InitStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.postStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostStmt([NotNull] GoLangParser.PostStmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaseStatement([NotNull] GoLangParser.CaseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.defaultCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefaultCase([NotNull] GoLangParser.DefaultCaseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] GoLangParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.elseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseBlock([NotNull] GoLangParser.ElseBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SlicesIndex</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSlicesIndex([NotNull] GoLangParser.SlicesIndexContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] GoLangParser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOr([NotNull] GoLangParser.OrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDiv([NotNull] GoLangParser.MulDivContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringsJoin</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringsJoin([NotNull] GoLangParser.StringsJoinContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParens([NotNull] GoLangParser.ParensContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InvokeLiteral</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvokeLiteral([NotNull] GoLangParser.InvokeLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitString([NotNull] GoLangParser.StringContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypedSliceInit</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypedSliceInit([NotNull] GoLangParser.TypedSliceInitContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StrconvAtoi</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrconvAtoi([NotNull] GoLangParser.StrconvAtoiContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] GoLangParser.NumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparison([NotNull] GoLangParser.ComparisonContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEquality([NotNull] GoLangParser.EqualityContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolean([NotNull] GoLangParser.BooleanContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StrconvParseFloat</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrconvParseFloat([NotNull] GoLangParser.StrconvParseFloatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InvokeMethodLiteral</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvokeMethodLiteral([NotNull] GoLangParser.InvokeMethodLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSub([NotNull] GoLangParser.AddSubContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IndexAccess</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexAccess([NotNull] GoLangParser.IndexAccessContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ReflectTypeOf</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReflectTypeOf([NotNull] GoLangParser.ReflectTypeOfContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Nil</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNil([NotNull] GoLangParser.NilContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Neg</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNeg([NotNull] GoLangParser.NegContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloat([NotNull] GoLangParser.FloatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNot([NotNull] GoLangParser.NotContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Append</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAppend([NotNull] GoLangParser.AppendContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Len</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLen([NotNull] GoLangParser.LenContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnd([NotNull] GoLangParser.AndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FieldAccess</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldAccess([NotNull] GoLangParser.FieldAccessContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="GoLangParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRune([NotNull] GoLangParser.RuneContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.sliceInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSliceInit([NotNull] GoLangParser.SliceInitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.nestedSliceInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNestedSliceInit([NotNull] GoLangParser.NestedSliceInitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.printStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrintStatement([NotNull] GoLangParser.PrintStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] GoLangParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] GoLangParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBaseType([NotNull] GoLangParser.BaseTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayType([NotNull] GoLangParser.ArrayTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GoLangParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprList([NotNull] GoLangParser.ExprListContext context);
}
} // namespace analyzer
