//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/GoLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GoLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, INT=59, FLOAT=60, 
		STRING=61, RUNE=62, BOOL=63, ID=64, SEMICOLON=65, WS=66, SINGLE_LINE_COMMENT=67, 
		MULTI_LINE_COMMENT=68;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_simpleStatement = 2, RULE_varDeclaration = 3, 
		RULE_funcDeclaration = 4, RULE_funcParams = 5, RULE_funcParam = 6, RULE_invoke = 7, 
		RULE_invokeParams = 8, RULE_invokeMethod = 9, RULE_implicitDeclaration = 10, 
		RULE_assignment = 11, RULE_compoundAssignment = 12, RULE_incDecStatement = 13, 
		RULE_exprStatement = 14, RULE_ifStatement = 15, RULE_whileStatement = 16, 
		RULE_breakStatement = 17, RULE_continueStatement = 18, RULE_switchStatement = 19, 
		RULE_forStatement = 20, RULE_forCondition = 21, RULE_forClause = 22, RULE_forRange = 23, 
		RULE_initStmt = 24, RULE_postStmt = 25, RULE_caseStatement = 26, RULE_defaultCase = 27, 
		RULE_block = 28, RULE_elseBlock = 29, RULE_expr = 30, RULE_sliceInit = 31, 
		RULE_nestedSliceInit = 32, RULE_printStatement = 33, RULE_returnStatement = 34, 
		RULE_type = 35, RULE_baseType = 36, RULE_arrayType = 37, RULE_exprList = 38;
	public static readonly string[] ruleNames = {
		"program", "statement", "simpleStatement", "varDeclaration", "funcDeclaration", 
		"funcParams", "funcParam", "invoke", "invokeParams", "invokeMethod", "implicitDeclaration", 
		"assignment", "compoundAssignment", "incDecStatement", "exprStatement", 
		"ifStatement", "whileStatement", "breakStatement", "continueStatement", 
		"switchStatement", "forStatement", "forCondition", "forClause", "forRange", 
		"initStmt", "postStmt", "caseStatement", "defaultCase", "block", "elseBlock", 
		"expr", "sliceInit", "nestedSliceInit", "printStatement", "returnStatement", 
		"type", "baseType", "arrayType", "exprList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'const'", "'='", "':='", "'func'", "'('", "')'", "','", 
		"'.'", "'['", "']'", "'+='", "'-='", "'++'", "'--'", "'if'", "'else'", 
		"'while'", "'break'", "'continue'", "'switch'", "'{'", "'}'", "'for'", 
		"'range'", "'case'", "':'", "'default'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "'len'", "'append'", 
		"'strings.Join'", "'slices.Index'", "'strconv.Atoi'", "'strconv.ParseFloat'", 
		"'reflect.TypeOf'", "'&&'", "'||'", "'nil'", "'fmt.Println'", "'return'", 
		"'int'", "'float64'", "'string'", "'bool'", "'rune'", "'[]'", null, null, 
		null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "INT", 
		"FLOAT", "STRING", "RUNE", "BOOL", "ID", "SEMICOLON", "WS", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GoLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78;
				statement();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346364010445L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitDeclarationContext implicitDeclaration() {
			return GetRuleContext<ImplicitDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclarationContext funcDeclaration() {
			return GetRuleContext<FuncDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				varDeclaration();
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 84;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				implicitDeclaration();
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 88;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91;
				funcDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 92;
				simpleStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStatementContext incDecStatement() {
			return GetRuleContext<IncDecStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeMethodContext invokeMethod() {
			return GetRuleContext<InvokeMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleStatement);
		int _la;
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				exprStatement();
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 96;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				assignment();
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 100;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103;
				compoundAssignment();
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 104;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107;
				incDecStatement();
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 108;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111;
				printStatement();
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 112;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 116;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 117;
				breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 118;
				continueStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 119;
				switchStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 120;
				returnStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 121;
				invoke();
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 122;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 125;
				invokeMethod();
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 126;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 129;
				forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDeclaration);
		int _la;
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 133;
				Match(ID);
				State = 135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 134;
					type();
					}
					break;
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 137;
					Match(T__2);
					State = 140;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__5:
					case T__32:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__49:
					case T__57:
					case INT:
					case FLOAT:
					case STRING:
					case RUNE:
					case BOOL:
					case ID:
						{
						State = 138;
						expr(0);
						}
						break;
					case T__21:
						{
						State = 139;
						sliceInit();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				Match(ID);
				State = 145;
				Match(T__3);
				{
				State = 146;
				type();
				}
				{
				State = 147;
				sliceInit();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclarationContext funcDeclaration() {
		FuncDeclarationContext _localctx = new FuncDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(T__4);
			State = 152;
			Match(ID);
			State = 153;
			Match(T__5);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 154;
				funcParams();
				}
			}

			State = 157;
			Match(T__6);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 2111L) != 0)) {
				{
				State = 158;
				type();
				}
			}

			State = 161;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamContext[] funcParam() {
			return GetRuleContexts<FuncParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamContext funcParam(int i) {
			return GetRuleContext<FuncParamContext>(i);
		}
		public FuncParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamsContext funcParams() {
		FuncParamsContext _localctx = new FuncParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			funcParam();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 164;
				Match(T__7);
				State = 165;
				funcParam();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamContext funcParam() {
		FuncParamContext _localctx = new FuncParamContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(ID);
			State = 172;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InvokeParamsContext invokeParams() {
			return GetRuleContext<InvokeParamsContext>(0);
		}
		public InvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeContext invoke() {
		InvokeContext _localctx = new InvokeContext(Context, State);
		EnterRule(_localctx, 14, RULE_invoke);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(ID);
			State = 175;
			Match(T__5);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 176;
				invokeParams();
				}
			}

			State = 179;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public InvokeParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokeParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeParamsContext invokeParams() {
		InvokeParamsContext _localctx = new InvokeParamsContext(Context, State);
		EnterRule(_localctx, 16, RULE_invokeParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			expr(0);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 182;
				Match(T__7);
				State = 183;
				expr(0);
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GoLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GoLangParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeParamsContext invokeParams() {
			return GetRuleContext<InvokeParamsContext>(0);
		}
		public InvokeMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokeMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeMethodContext invokeMethod() {
		InvokeMethodContext _localctx = new InvokeMethodContext(Context, State);
		EnterRule(_localctx, 18, RULE_invokeMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(ID);
			State = 190;
			Match(T__8);
			State = 191;
			Match(ID);
			State = 192;
			Match(T__5);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 193;
				invokeParams();
				}
			}

			State = 196;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public ImplicitDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitDeclarationContext implicitDeclaration() {
		ImplicitDeclarationContext _localctx = new ImplicitDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_implicitDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(ID);
			State = 199;
			Match(T__3);
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 200;
				expr(0);
				}
				break;
			case T__21:
				{
				State = 201;
				sliceInit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				Match(ID);
				State = 205;
				Match(T__2);
				State = 208;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__5:
				case T__32:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__49:
				case T__57:
				case INT:
				case FLOAT:
				case STRING:
				case RUNE:
				case BOOL:
				case ID:
					{
					State = 206;
					expr(0);
					}
					break;
				case T__21:
					{
					State = 207;
					sliceInit();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				expr(0);
				State = 211;
				Match(T__9);
				State = 212;
				expr(0);
				State = 213;
				Match(T__10);
				State = 214;
				Match(T__2);
				State = 215;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignmentContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CompoundAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignmentContext compoundAssignment() {
		CompoundAssignmentContext _localctx = new CompoundAssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_compoundAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(ID);
			State = 220;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 221;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStatementContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public IncDecStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStatementContext incDecStatement() {
		IncDecStatementContext _localctx = new IncDecStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_incDecStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(ID);
			State = 224;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStatementContext exprStatement() {
		ExprStatementContext _localctx = new ExprStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(T__15);
			State = 229;
			expr(0);
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				{
				State = 230;
				block();
				}
				break;
			case T__5:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__23:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__50:
			case T__51:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 231;
				simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 234;
				Match(T__16);
				State = 235;
				elseBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(T__17);
			State = 239;
			expr(0);
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				{
				State = 240;
				block();
				}
				break;
			case T__5:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__23:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__50:
			case T__51:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 241;
				simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(T__18);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 245;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(T__19);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 249;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCaseContext defaultCase() {
			return GetRuleContext<DefaultCaseContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(T__20);
			State = 253;
			expr(0);
			State = 254;
			Match(T__21);
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 255;
				caseStatement();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 261;
				defaultCase();
				}
			}

			State = 264;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForClauseContext forClause() {
			return GetRuleContext<ForClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeContext forRange() {
			return GetRuleContext<ForRangeContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(T__23);
			State = 270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 267;
				forCondition();
				}
				break;
			case 2:
				{
				State = 268;
				forClause();
				}
				break;
			case 3:
				{
				State = 269;
				forRange();
				}
				break;
			}
			State = 272;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 42, RULE_forCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GoLangParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GoLangParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitStmtContext initStmt() {
			return GetRuleContext<InitStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostStmtContext postStmt() {
			return GetRuleContext<PostStmtContext>(0);
		}
		public ForClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForClauseContext forClause() {
		ForClauseContext _localctx = new ForClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_forClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 276;
				initStmt();
				State = 277;
				Match(SEMICOLON);
				}
				break;
			}
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 281;
				expr(0);
				}
			}

			State = 284;
			Match(SEMICOLON);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 285;
				postStmt();
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 286;
					Match(SEMICOLON);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GoLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GoLangParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeContext forRange() {
		ForRangeContext _localctx = new ForRangeContext(Context, State);
		EnterRule(_localctx, 46, RULE_forRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(ID);
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 292;
				Match(T__7);
				State = 293;
				Match(ID);
				}
			}

			State = 296;
			Match(T__3);
			State = 297;
			Match(T__24);
			State = 298;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitDeclarationContext implicitDeclaration() {
			return GetRuleContext<ImplicitDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		public InitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitStmtContext initStmt() {
		InitStmtContext _localctx = new InitStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_initStmt);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				implicitDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 303;
				compoundAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStatementContext incDecStatement() {
			return GetRuleContext<IncDecStatementContext>(0);
		}
		public PostStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostStmtContext postStmt() {
		PostStmtContext _localctx = new PostStmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_postStmt);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				compoundAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308;
				incDecStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(T__25);
			State = 312;
			expr(0);
			State = 313;
			Match(T__26);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346364010445L) != 0)) {
				{
				{
				State = 314;
				statement();
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseContext defaultCase() {
		DefaultCaseContext _localctx = new DefaultCaseContext(Context, State);
		EnterRule(_localctx, 54, RULE_defaultCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(T__27);
			State = 321;
			Match(T__26);
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346364010445L) != 0)) {
				{
				{
				State = 322;
				statement();
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(T__21);
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346364010445L) != 0)) {
				{
				{
				State = 329;
				statement();
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 335;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_elseBlock);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 339;
				simpleStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SlicesIndexContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SlicesIndexContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlicesIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public VariableContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringsJoinContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StringsJoinContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringsJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvokeLiteralContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public InvokeLiteralContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoLangParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedSliceInitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public TypedSliceInitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconvAtoiContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StrconvAtoiContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconvAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GoLangParser.INT, 0); }
		public NumberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GoLangParser.BOOL, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconvParseFloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StrconvParseFloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconvParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvokeMethodLiteralContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvokeMethodContext invokeMethod() {
			return GetRuleContext<InvokeMethodContext>(0);
		}
		public InvokeMethodLiteralContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeMethodLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IndexAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReflectTypeOfContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReflectTypeOfContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReflectTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilContext : ExprContext {
		public NilContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GoLangParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppendContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public AppendContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LenContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LenContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public FieldAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(GoLangParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 343;
				Match(T__39);
				State = 344;
				expr(23);
				}
				break;
			case 2:
				{
				_localctx = new NegContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 345;
				Match(T__32);
				State = 346;
				expr(22);
				}
				break;
			case 3:
				{
				_localctx = new LenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 347;
				Match(T__40);
				State = 348;
				Match(T__5);
				State = 349;
				expr(0);
				State = 350;
				Match(T__6);
				}
				break;
			case 4:
				{
				_localctx = new AppendContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 352;
				Match(T__41);
				State = 353;
				Match(T__5);
				State = 354;
				expr(0);
				State = 355;
				Match(T__7);
				State = 358;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__5:
				case T__32:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__49:
				case T__57:
				case INT:
				case FLOAT:
				case STRING:
				case RUNE:
				case BOOL:
				case ID:
					{
					State = 356;
					expr(0);
					}
					break;
				case T__21:
					{
					State = 357;
					sliceInit();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 360;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new StringsJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362;
				Match(T__42);
				State = 363;
				Match(T__5);
				State = 364;
				expr(0);
				State = 365;
				Match(T__7);
				State = 366;
				expr(0);
				State = 367;
				Match(T__6);
				}
				break;
			case 6:
				{
				_localctx = new SlicesIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 369;
				Match(T__43);
				State = 370;
				Match(T__5);
				State = 371;
				expr(0);
				State = 372;
				Match(T__7);
				State = 373;
				expr(0);
				State = 374;
				Match(T__6);
				}
				break;
			case 7:
				{
				_localctx = new StrconvAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				Match(T__44);
				State = 377;
				Match(T__5);
				State = 378;
				expr(0);
				State = 379;
				Match(T__6);
				}
				break;
			case 8:
				{
				_localctx = new StrconvParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 381;
				Match(T__45);
				State = 382;
				Match(T__5);
				State = 383;
				expr(0);
				State = 384;
				Match(T__6);
				}
				break;
			case 9:
				{
				_localctx = new ReflectTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386;
				Match(T__46);
				State = 387;
				Match(T__5);
				State = 388;
				expr(0);
				State = 389;
				Match(T__6);
				}
				break;
			case 10:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 391;
				Match(INT);
				}
				break;
			case 11:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				Match(FLOAT);
				}
				break;
			case 12:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 393;
				Match(STRING);
				}
				break;
			case 13:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394;
				Match(RUNE);
				}
				break;
			case 14:
				{
				_localctx = new InvokeLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 395;
				invoke();
				}
				break;
			case 15:
				{
				_localctx = new InvokeMethodLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396;
				invokeMethod();
				}
				break;
			case 16:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 397;
				Match(BOOL);
				}
				break;
			case 17:
				{
				_localctx = new NilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 398;
				Match(T__49);
				}
				break;
			case 18:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 399;
				Match(ID);
				}
				break;
			case 19:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 400;
				Match(T__5);
				State = 401;
				expr(0);
				State = 402;
				Match(T__6);
				}
				break;
			case 20:
				{
				_localctx = new TypedSliceInitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 404;
				arrayType();
				State = 405;
				sliceInit();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 435;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 409;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 410;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3758096384L) != 0)) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 411;
						expr(28);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 412;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 413;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 414;
						expr(27);
						}
						break;
					case 3:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 415;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 416;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__33 || _la==T__34) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 417;
						expr(26);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 418;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 419;
						((ComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1030792151040L) != 0)) ) {
							((ComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 420;
						expr(25);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 421;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 422;
						Match(T__47);
						State = 423;
						expr(14);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 424;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 425;
						Match(T__48);
						State = 426;
						expr(13);
						}
						break;
					case 7:
						{
						_localctx = new FieldAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 427;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 428;
						Match(T__8);
						State = 429;
						Match(ID);
						}
						break;
					case 8:
						{
						_localctx = new IndexAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 430;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 431;
						Match(T__9);
						State = 432;
						expr(0);
						State = 433;
						Match(T__10);
						}
						break;
					}
					} 
				}
				State = 439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SliceInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedSliceInitContext nestedSliceInit() {
			return GetRuleContext<NestedSliceInitContext>(0);
		}
		public SliceInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceInitContext sliceInit() {
		SliceInitContext _localctx = new SliceInitContext(Context, State);
		EnterRule(_localctx, 62, RULE_sliceInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(T__21);
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 441;
				exprList();
				}
				break;
			case T__21:
				{
				State = 442;
				nestedSliceInit();
				}
				break;
			case T__22:
				break;
			default:
				break;
			}
			State = 445;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedSliceInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext[] sliceInit() {
			return GetRuleContexts<SliceInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit(int i) {
			return GetRuleContext<SliceInitContext>(i);
		}
		public NestedSliceInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedSliceInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedSliceInitContext nestedSliceInit() {
		NestedSliceInitContext _localctx = new NestedSliceInitContext(Context, State);
		EnterRule(_localctx, 64, RULE_nestedSliceInit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			sliceInit();
			State = 452;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 448;
					Match(T__7);
					State = 449;
					sliceInit();
					}
					} 
				}
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 455;
				Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(T__50);
			State = 459;
			Match(T__5);
			State = 460;
			expr(0);
			State = 461;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(T__51);
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 464;
				expr(0);
				}
				break;
			}
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 467;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_type);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 470;
				baseType();
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471;
				arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 2079L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(T__57);
			State = 479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__57:
				{
				State = 477;
				arrayType();
				}
				break;
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case ID:
				{
				State = 478;
				baseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 76, RULE_exprList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			expr(0);
			State = 486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 482;
					Match(T__7);
					State = 483;
					expr(0);
					}
					} 
				}
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 489;
				Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 27);
		case 1: return Precpred(Context, 26);
		case 2: return Precpred(Context, 25);
		case 3: return Precpred(Context, 24);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 28);
		case 7: return Precpred(Context, 14);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,68,493,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,4,0,80,8,0,11,0,12,0,81,1,1,1,1,3,1,
		86,8,1,1,1,1,1,3,1,90,8,1,1,1,1,1,3,1,94,8,1,1,2,1,2,3,2,98,8,2,1,2,1,
		2,3,2,102,8,2,1,2,1,2,3,2,106,8,2,1,2,1,2,3,2,110,8,2,1,2,1,2,3,2,114,
		8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,124,8,2,1,2,1,2,3,2,128,8,2,1,
		2,3,2,131,8,2,1,3,1,3,1,3,3,3,136,8,3,1,3,1,3,1,3,3,3,141,8,3,3,3,143,
		8,3,1,3,1,3,1,3,1,3,1,3,3,3,150,8,3,1,4,1,4,1,4,1,4,3,4,156,8,4,1,4,1,
		4,3,4,160,8,4,1,4,1,4,1,5,1,5,1,5,5,5,167,8,5,10,5,12,5,170,9,5,1,6,1,
		6,1,6,1,7,1,7,1,7,3,7,178,8,7,1,7,1,7,1,8,1,8,1,8,5,8,185,8,8,10,8,12,
		8,188,9,8,1,9,1,9,1,9,1,9,1,9,3,9,195,8,9,1,9,1,9,1,10,1,10,1,10,1,10,
		3,10,203,8,10,1,11,1,11,1,11,1,11,3,11,209,8,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,3,11,218,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
		1,15,1,15,1,15,1,15,3,15,233,8,15,1,15,1,15,3,15,237,8,15,1,16,1,16,1,
		16,1,16,3,16,243,8,16,1,17,1,17,3,17,247,8,17,1,18,1,18,3,18,251,8,18,
		1,19,1,19,1,19,1,19,5,19,257,8,19,10,19,12,19,260,9,19,1,19,3,19,263,8,
		19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,271,8,20,1,20,1,20,1,21,1,21,1,22,
		1,22,1,22,3,22,280,8,22,1,22,3,22,283,8,22,1,22,1,22,1,22,3,22,288,8,22,
		3,22,290,8,22,1,23,1,23,1,23,3,23,295,8,23,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,3,24,305,8,24,1,25,1,25,1,25,3,25,310,8,25,1,26,1,26,1,26,
		1,26,5,26,316,8,26,10,26,12,26,319,9,26,1,27,1,27,1,27,5,27,324,8,27,10,
		27,12,27,327,9,27,1,28,1,28,5,28,331,8,28,10,28,12,28,334,9,28,1,28,1,
		28,1,29,1,29,1,29,3,29,341,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,359,8,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,3,30,408,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,5,30,436,8,30,10,30,12,30,439,9,30,1,31,1,31,1,31,3,31,444,8,
		31,1,31,1,31,1,32,1,32,1,32,5,32,451,8,32,10,32,12,32,454,9,32,1,32,3,
		32,457,8,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,466,8,34,1,34,3,34,
		469,8,34,1,35,1,35,3,35,473,8,35,1,36,1,36,1,37,1,37,1,37,3,37,480,8,37,
		1,38,1,38,1,38,5,38,485,8,38,10,38,12,38,488,9,38,1,38,3,38,491,8,38,1,
		38,0,1,60,39,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,0,8,1,0,1,2,1,0,
		12,13,1,0,14,15,1,0,29,31,1,0,32,33,1,0,34,35,1,0,36,39,2,0,53,57,64,64,
		554,0,79,1,0,0,0,2,93,1,0,0,0,4,130,1,0,0,0,6,149,1,0,0,0,8,151,1,0,0,
		0,10,163,1,0,0,0,12,171,1,0,0,0,14,174,1,0,0,0,16,181,1,0,0,0,18,189,1,
		0,0,0,20,198,1,0,0,0,22,217,1,0,0,0,24,219,1,0,0,0,26,223,1,0,0,0,28,226,
		1,0,0,0,30,228,1,0,0,0,32,238,1,0,0,0,34,244,1,0,0,0,36,248,1,0,0,0,38,
		252,1,0,0,0,40,266,1,0,0,0,42,274,1,0,0,0,44,279,1,0,0,0,46,291,1,0,0,
		0,48,304,1,0,0,0,50,309,1,0,0,0,52,311,1,0,0,0,54,320,1,0,0,0,56,328,1,
		0,0,0,58,340,1,0,0,0,60,407,1,0,0,0,62,440,1,0,0,0,64,447,1,0,0,0,66,458,
		1,0,0,0,68,463,1,0,0,0,70,472,1,0,0,0,72,474,1,0,0,0,74,476,1,0,0,0,76,
		481,1,0,0,0,78,80,3,2,1,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,
		82,1,0,0,0,82,1,1,0,0,0,83,85,3,6,3,0,84,86,5,65,0,0,85,84,1,0,0,0,85,
		86,1,0,0,0,86,94,1,0,0,0,87,89,3,20,10,0,88,90,5,65,0,0,89,88,1,0,0,0,
		89,90,1,0,0,0,90,94,1,0,0,0,91,94,3,8,4,0,92,94,3,4,2,0,93,83,1,0,0,0,
		93,87,1,0,0,0,93,91,1,0,0,0,93,92,1,0,0,0,94,3,1,0,0,0,95,97,3,28,14,0,
		96,98,5,65,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,131,1,0,0,0,99,101,3,22,
		11,0,100,102,5,65,0,0,101,100,1,0,0,0,101,102,1,0,0,0,102,131,1,0,0,0,
		103,105,3,24,12,0,104,106,5,65,0,0,105,104,1,0,0,0,105,106,1,0,0,0,106,
		131,1,0,0,0,107,109,3,26,13,0,108,110,5,65,0,0,109,108,1,0,0,0,109,110,
		1,0,0,0,110,131,1,0,0,0,111,113,3,66,33,0,112,114,5,65,0,0,113,112,1,0,
		0,0,113,114,1,0,0,0,114,131,1,0,0,0,115,131,3,30,15,0,116,131,3,32,16,
		0,117,131,3,34,17,0,118,131,3,36,18,0,119,131,3,38,19,0,120,131,3,68,34,
		0,121,123,3,14,7,0,122,124,5,65,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,
		131,1,0,0,0,125,127,3,18,9,0,126,128,5,65,0,0,127,126,1,0,0,0,127,128,
		1,0,0,0,128,131,1,0,0,0,129,131,3,40,20,0,130,95,1,0,0,0,130,99,1,0,0,
		0,130,103,1,0,0,0,130,107,1,0,0,0,130,111,1,0,0,0,130,115,1,0,0,0,130,
		116,1,0,0,0,130,117,1,0,0,0,130,118,1,0,0,0,130,119,1,0,0,0,130,120,1,
		0,0,0,130,121,1,0,0,0,130,125,1,0,0,0,130,129,1,0,0,0,131,5,1,0,0,0,132,
		133,7,0,0,0,133,135,5,64,0,0,134,136,3,70,35,0,135,134,1,0,0,0,135,136,
		1,0,0,0,136,142,1,0,0,0,137,140,5,3,0,0,138,141,3,60,30,0,139,141,3,62,
		31,0,140,138,1,0,0,0,140,139,1,0,0,0,141,143,1,0,0,0,142,137,1,0,0,0,142,
		143,1,0,0,0,143,150,1,0,0,0,144,145,5,64,0,0,145,146,5,4,0,0,146,147,3,
		70,35,0,147,148,3,62,31,0,148,150,1,0,0,0,149,132,1,0,0,0,149,144,1,0,
		0,0,150,7,1,0,0,0,151,152,5,5,0,0,152,153,5,64,0,0,153,155,5,6,0,0,154,
		156,3,10,5,0,155,154,1,0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,159,5,
		7,0,0,158,160,3,70,35,0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,
		0,161,162,3,56,28,0,162,9,1,0,0,0,163,168,3,12,6,0,164,165,5,8,0,0,165,
		167,3,12,6,0,166,164,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,
		0,0,0,169,11,1,0,0,0,170,168,1,0,0,0,171,172,5,64,0,0,172,173,3,70,35,
		0,173,13,1,0,0,0,174,175,5,64,0,0,175,177,5,6,0,0,176,178,3,16,8,0,177,
		176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,5,7,0,0,180,15,1,0,
		0,0,181,186,3,60,30,0,182,183,5,8,0,0,183,185,3,60,30,0,184,182,1,0,0,
		0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,17,1,0,0,0,188,186,
		1,0,0,0,189,190,5,64,0,0,190,191,5,9,0,0,191,192,5,64,0,0,192,194,5,6,
		0,0,193,195,3,16,8,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,
		197,5,7,0,0,197,19,1,0,0,0,198,199,5,64,0,0,199,202,5,4,0,0,200,203,3,
		60,30,0,201,203,3,62,31,0,202,200,1,0,0,0,202,201,1,0,0,0,203,21,1,0,0,
		0,204,205,5,64,0,0,205,208,5,3,0,0,206,209,3,60,30,0,207,209,3,62,31,0,
		208,206,1,0,0,0,208,207,1,0,0,0,209,218,1,0,0,0,210,211,3,60,30,0,211,
		212,5,10,0,0,212,213,3,60,30,0,213,214,5,11,0,0,214,215,5,3,0,0,215,216,
		3,60,30,0,216,218,1,0,0,0,217,204,1,0,0,0,217,210,1,0,0,0,218,23,1,0,0,
		0,219,220,5,64,0,0,220,221,7,1,0,0,221,222,3,60,30,0,222,25,1,0,0,0,223,
		224,5,64,0,0,224,225,7,2,0,0,225,27,1,0,0,0,226,227,3,60,30,0,227,29,1,
		0,0,0,228,229,5,16,0,0,229,232,3,60,30,0,230,233,3,56,28,0,231,233,3,4,
		2,0,232,230,1,0,0,0,232,231,1,0,0,0,233,236,1,0,0,0,234,235,5,17,0,0,235,
		237,3,58,29,0,236,234,1,0,0,0,236,237,1,0,0,0,237,31,1,0,0,0,238,239,5,
		18,0,0,239,242,3,60,30,0,240,243,3,56,28,0,241,243,3,4,2,0,242,240,1,0,
		0,0,242,241,1,0,0,0,243,33,1,0,0,0,244,246,5,19,0,0,245,247,5,65,0,0,246,
		245,1,0,0,0,246,247,1,0,0,0,247,35,1,0,0,0,248,250,5,20,0,0,249,251,5,
		65,0,0,250,249,1,0,0,0,250,251,1,0,0,0,251,37,1,0,0,0,252,253,5,21,0,0,
		253,254,3,60,30,0,254,258,5,22,0,0,255,257,3,52,26,0,256,255,1,0,0,0,257,
		260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,262,1,0,0,0,260,258,1,
		0,0,0,261,263,3,54,27,0,262,261,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,
		0,264,265,5,23,0,0,265,39,1,0,0,0,266,270,5,24,0,0,267,271,3,42,21,0,268,
		271,3,44,22,0,269,271,3,46,23,0,270,267,1,0,0,0,270,268,1,0,0,0,270,269,
		1,0,0,0,271,272,1,0,0,0,272,273,3,56,28,0,273,41,1,0,0,0,274,275,3,60,
		30,0,275,43,1,0,0,0,276,277,3,48,24,0,277,278,5,65,0,0,278,280,1,0,0,0,
		279,276,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,283,3,60,30,0,282,
		281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,289,5,65,0,0,285,287,3,
		50,25,0,286,288,5,65,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,
		0,289,285,1,0,0,0,289,290,1,0,0,0,290,45,1,0,0,0,291,294,5,64,0,0,292,
		293,5,8,0,0,293,295,5,64,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,296,1,
		0,0,0,296,297,5,4,0,0,297,298,5,25,0,0,298,299,3,60,30,0,299,47,1,0,0,
		0,300,305,3,6,3,0,301,305,3,20,10,0,302,305,3,22,11,0,303,305,3,24,12,
		0,304,300,1,0,0,0,304,301,1,0,0,0,304,302,1,0,0,0,304,303,1,0,0,0,305,
		49,1,0,0,0,306,310,3,22,11,0,307,310,3,24,12,0,308,310,3,26,13,0,309,306,
		1,0,0,0,309,307,1,0,0,0,309,308,1,0,0,0,310,51,1,0,0,0,311,312,5,26,0,
		0,312,313,3,60,30,0,313,317,5,27,0,0,314,316,3,2,1,0,315,314,1,0,0,0,316,
		319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,53,1,0,0,0,319,317,1,0,
		0,0,320,321,5,28,0,0,321,325,5,27,0,0,322,324,3,2,1,0,323,322,1,0,0,0,
		324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,55,1,0,0,0,327,325,
		1,0,0,0,328,332,5,22,0,0,329,331,3,2,1,0,330,329,1,0,0,0,331,334,1,0,0,
		0,332,330,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,
		336,5,23,0,0,336,57,1,0,0,0,337,341,3,30,15,0,338,341,3,56,28,0,339,341,
		3,4,2,0,340,337,1,0,0,0,340,338,1,0,0,0,340,339,1,0,0,0,341,59,1,0,0,0,
		342,343,6,30,-1,0,343,344,5,40,0,0,344,408,3,60,30,23,345,346,5,33,0,0,
		346,408,3,60,30,22,347,348,5,41,0,0,348,349,5,6,0,0,349,350,3,60,30,0,
		350,351,5,7,0,0,351,408,1,0,0,0,352,353,5,42,0,0,353,354,5,6,0,0,354,355,
		3,60,30,0,355,358,5,8,0,0,356,359,3,60,30,0,357,359,3,62,31,0,358,356,
		1,0,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,361,5,7,0,0,361,408,1,0,0,
		0,362,363,5,43,0,0,363,364,5,6,0,0,364,365,3,60,30,0,365,366,5,8,0,0,366,
		367,3,60,30,0,367,368,5,7,0,0,368,408,1,0,0,0,369,370,5,44,0,0,370,371,
		5,6,0,0,371,372,3,60,30,0,372,373,5,8,0,0,373,374,3,60,30,0,374,375,5,
		7,0,0,375,408,1,0,0,0,376,377,5,45,0,0,377,378,5,6,0,0,378,379,3,60,30,
		0,379,380,5,7,0,0,380,408,1,0,0,0,381,382,5,46,0,0,382,383,5,6,0,0,383,
		384,3,60,30,0,384,385,5,7,0,0,385,408,1,0,0,0,386,387,5,47,0,0,387,388,
		5,6,0,0,388,389,3,60,30,0,389,390,5,7,0,0,390,408,1,0,0,0,391,408,5,59,
		0,0,392,408,5,60,0,0,393,408,5,61,0,0,394,408,5,62,0,0,395,408,3,14,7,
		0,396,408,3,18,9,0,397,408,5,63,0,0,398,408,5,50,0,0,399,408,5,64,0,0,
		400,401,5,6,0,0,401,402,3,60,30,0,402,403,5,7,0,0,403,408,1,0,0,0,404,
		405,3,74,37,0,405,406,3,62,31,0,406,408,1,0,0,0,407,342,1,0,0,0,407,345,
		1,0,0,0,407,347,1,0,0,0,407,352,1,0,0,0,407,362,1,0,0,0,407,369,1,0,0,
		0,407,376,1,0,0,0,407,381,1,0,0,0,407,386,1,0,0,0,407,391,1,0,0,0,407,
		392,1,0,0,0,407,393,1,0,0,0,407,394,1,0,0,0,407,395,1,0,0,0,407,396,1,
		0,0,0,407,397,1,0,0,0,407,398,1,0,0,0,407,399,1,0,0,0,407,400,1,0,0,0,
		407,404,1,0,0,0,408,437,1,0,0,0,409,410,10,27,0,0,410,411,7,3,0,0,411,
		436,3,60,30,28,412,413,10,26,0,0,413,414,7,4,0,0,414,436,3,60,30,27,415,
		416,10,25,0,0,416,417,7,5,0,0,417,436,3,60,30,26,418,419,10,24,0,0,419,
		420,7,6,0,0,420,436,3,60,30,25,421,422,10,13,0,0,422,423,5,48,0,0,423,
		436,3,60,30,14,424,425,10,12,0,0,425,426,5,49,0,0,426,436,3,60,30,13,427,
		428,10,28,0,0,428,429,5,9,0,0,429,436,5,64,0,0,430,431,10,14,0,0,431,432,
		5,10,0,0,432,433,3,60,30,0,433,434,5,11,0,0,434,436,1,0,0,0,435,409,1,
		0,0,0,435,412,1,0,0,0,435,415,1,0,0,0,435,418,1,0,0,0,435,421,1,0,0,0,
		435,424,1,0,0,0,435,427,1,0,0,0,435,430,1,0,0,0,436,439,1,0,0,0,437,435,
		1,0,0,0,437,438,1,0,0,0,438,61,1,0,0,0,439,437,1,0,0,0,440,443,5,22,0,
		0,441,444,3,76,38,0,442,444,3,64,32,0,443,441,1,0,0,0,443,442,1,0,0,0,
		443,444,1,0,0,0,444,445,1,0,0,0,445,446,5,23,0,0,446,63,1,0,0,0,447,452,
		3,62,31,0,448,449,5,8,0,0,449,451,3,62,31,0,450,448,1,0,0,0,451,454,1,
		0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,
		455,457,5,8,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,65,1,0,0,0,458,459,
		5,51,0,0,459,460,5,6,0,0,460,461,3,60,30,0,461,462,5,7,0,0,462,67,1,0,
		0,0,463,465,5,52,0,0,464,466,3,60,30,0,465,464,1,0,0,0,465,466,1,0,0,0,
		466,468,1,0,0,0,467,469,5,65,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,69,
		1,0,0,0,470,473,3,72,36,0,471,473,3,74,37,0,472,470,1,0,0,0,472,471,1,
		0,0,0,473,71,1,0,0,0,474,475,7,7,0,0,475,73,1,0,0,0,476,479,5,58,0,0,477,
		480,3,74,37,0,478,480,3,72,36,0,479,477,1,0,0,0,479,478,1,0,0,0,480,75,
		1,0,0,0,481,486,3,60,30,0,482,483,5,8,0,0,483,485,3,60,30,0,484,482,1,
		0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,490,1,0,0,0,
		488,486,1,0,0,0,489,491,5,8,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,77,
		1,0,0,0,57,81,85,89,93,97,101,105,109,113,123,127,130,135,140,142,149,
		155,159,168,177,186,194,202,208,217,232,236,242,246,250,258,262,270,279,
		282,287,289,294,304,309,317,325,332,340,358,407,435,437,443,452,456,465,
		468,472,479,486,490
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
