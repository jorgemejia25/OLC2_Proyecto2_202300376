//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/GoLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GoLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, INT=59, FLOAT=60, 
		STRING=61, RUNE=62, BOOL=63, ID=64, SEMICOLON=65, WS=66, SINGLE_LINE_COMMENT=67, 
		MULTI_LINE_COMMENT=68;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_simpleStatement = 2, RULE_varDeclaration = 3, 
		RULE_funcDeclaration = 4, RULE_funcParams = 5, RULE_funcParam = 6, RULE_invoke = 7, 
		RULE_invokeParams = 8, RULE_invokeMethod = 9, RULE_implicitDeclaration = 10, 
		RULE_assignment = 11, RULE_compoundAssignment = 12, RULE_incDecStatement = 13, 
		RULE_exprStatement = 14, RULE_ifStatement = 15, RULE_whileStatement = 16, 
		RULE_breakStatement = 17, RULE_continueStatement = 18, RULE_switchStatement = 19, 
		RULE_forStatement = 20, RULE_forCondition = 21, RULE_forClause = 22, RULE_forRange = 23, 
		RULE_initStmt = 24, RULE_postStmt = 25, RULE_caseStatement = 26, RULE_defaultCase = 27, 
		RULE_block = 28, RULE_elseBlock = 29, RULE_expr = 30, RULE_sliceInit = 31, 
		RULE_nestedSliceInit = 32, RULE_printStatement = 33, RULE_returnStatement = 34, 
		RULE_type = 35, RULE_baseType = 36, RULE_arrayType = 37, RULE_exprList = 38;
	public static readonly string[] ruleNames = {
		"program", "statement", "simpleStatement", "varDeclaration", "funcDeclaration", 
		"funcParams", "funcParam", "invoke", "invokeParams", "invokeMethod", "implicitDeclaration", 
		"assignment", "compoundAssignment", "incDecStatement", "exprStatement", 
		"ifStatement", "whileStatement", "breakStatement", "continueStatement", 
		"switchStatement", "forStatement", "forCondition", "forClause", "forRange", 
		"initStmt", "postStmt", "caseStatement", "defaultCase", "block", "elseBlock", 
		"expr", "sliceInit", "nestedSliceInit", "printStatement", "returnStatement", 
		"type", "baseType", "arrayType", "exprList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'const'", "'='", "':='", "'func'", "'('", "')'", "','", 
		"'.'", "'['", "']'", "'+='", "'-='", "'++'", "'--'", "'if'", "'else'", 
		"'while'", "'break'", "'continue'", "'switch'", "'{'", "'}'", "'for'", 
		"'range'", "'case'", "':'", "'default'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "'len'", "'append'", 
		"'strings.Join'", "'slices.Index'", "'strconv.Atoi'", "'strconv.ParseFloat'", 
		"'reflect.TypeOf'", "'&&'", "'||'", "'nil'", "'fmt.Println'", "'return'", 
		"'int'", "'float64'", "'string'", "'bool'", "'rune'", "'[]'", null, null, 
		null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "INT", 
		"FLOAT", "STRING", "RUNE", "BOOL", "ID", "SEMICOLON", "WS", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GoLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78;
				statement();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346361913293L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitDeclarationContext implicitDeclaration() {
			return GetRuleContext<ImplicitDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclarationContext funcDeclaration() {
			return GetRuleContext<FuncDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				varDeclaration();
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 84;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				implicitDeclaration();
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 88;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91;
				funcDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 92;
				simpleStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 93;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStatementContext incDecStatement() {
			return GetRuleContext<IncDecStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeMethodContext invokeMethod() {
			return GetRuleContext<InvokeMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleStatement);
		int _la;
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				exprStatement();
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 97;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				assignment();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 101;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				compoundAssignment();
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 105;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108;
				incDecStatement();
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 109;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 112;
				printStatement();
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 113;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 116;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 117;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 118;
				breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 119;
				continueStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 120;
				switchStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 121;
				returnStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 122;
				invoke();
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 123;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 126;
				invokeMethod();
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 127;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 130;
				forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDeclaration);
		int _la;
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 134;
				Match(ID);
				State = 136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 135;
					type();
					}
					break;
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 138;
					Match(T__2);
					State = 141;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__5:
					case T__32:
					case T__39:
					case T__40:
					case T__41:
					case T__42:
					case T__43:
					case T__44:
					case T__45:
					case T__46:
					case T__49:
					case T__57:
					case INT:
					case FLOAT:
					case STRING:
					case RUNE:
					case BOOL:
					case ID:
						{
						State = 139;
						expr(0);
						}
						break;
					case T__21:
						{
						State = 140;
						sliceInit();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				Match(ID);
				State = 146;
				Match(T__3);
				{
				State = 147;
				type();
				}
				{
				State = 148;
				sliceInit();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclarationContext funcDeclaration() {
		FuncDeclarationContext _localctx = new FuncDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(T__4);
			State = 153;
			Match(ID);
			State = 154;
			Match(T__5);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 155;
				funcParams();
				}
			}

			State = 158;
			Match(T__6);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 2111L) != 0)) {
				{
				State = 159;
				type();
				}
			}

			State = 162;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamContext[] funcParam() {
			return GetRuleContexts<FuncParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamContext funcParam(int i) {
			return GetRuleContext<FuncParamContext>(i);
		}
		public FuncParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamsContext funcParams() {
		FuncParamsContext _localctx = new FuncParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			funcParam();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 165;
				Match(T__7);
				State = 166;
				funcParam();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamContext funcParam() {
		FuncParamContext _localctx = new FuncParamContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(ID);
			State = 173;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InvokeParamsContext invokeParams() {
			return GetRuleContext<InvokeParamsContext>(0);
		}
		public InvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeContext invoke() {
		InvokeContext _localctx = new InvokeContext(Context, State);
		EnterRule(_localctx, 14, RULE_invoke);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(ID);
			State = 176;
			Match(T__5);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 177;
				invokeParams();
				}
			}

			State = 180;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public InvokeParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokeParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeParamsContext invokeParams() {
		InvokeParamsContext _localctx = new InvokeParamsContext(Context, State);
		EnterRule(_localctx, 16, RULE_invokeParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			expr(0);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 183;
				Match(T__7);
				State = 184;
				expr(0);
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GoLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GoLangParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeParamsContext invokeParams() {
			return GetRuleContext<InvokeParamsContext>(0);
		}
		public InvokeMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokeMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeMethodContext invokeMethod() {
		InvokeMethodContext _localctx = new InvokeMethodContext(Context, State);
		EnterRule(_localctx, 18, RULE_invokeMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(ID);
			State = 191;
			Match(T__8);
			State = 192;
			Match(ID);
			State = 193;
			Match(T__5);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 194;
				invokeParams();
				}
			}

			State = 197;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public ImplicitDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitDeclarationContext implicitDeclaration() {
		ImplicitDeclarationContext _localctx = new ImplicitDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_implicitDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(ID);
			State = 200;
			Match(T__3);
			State = 203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 201;
				expr(0);
				}
				break;
			case T__21:
				{
				State = 202;
				sliceInit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(ID);
				State = 206;
				Match(T__2);
				State = 209;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__5:
				case T__32:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__49:
				case T__57:
				case INT:
				case FLOAT:
				case STRING:
				case RUNE:
				case BOOL:
				case ID:
					{
					State = 207;
					expr(0);
					}
					break;
				case T__21:
					{
					State = 208;
					sliceInit();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				expr(0);
				State = 212;
				Match(T__9);
				State = 213;
				expr(0);
				State = 214;
				Match(T__10);
				State = 215;
				Match(T__2);
				State = 216;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignmentContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CompoundAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignmentContext compoundAssignment() {
		CompoundAssignmentContext _localctx = new CompoundAssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_compoundAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(ID);
			State = 221;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 222;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStatementContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public IncDecStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStatementContext incDecStatement() {
		IncDecStatementContext _localctx = new IncDecStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_incDecStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(ID);
			State = 225;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStatementContext exprStatement() {
		ExprStatementContext _localctx = new ExprStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(T__15);
			State = 230;
			expr(0);
			State = 233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				{
				State = 231;
				block();
				}
				break;
			case T__5:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__23:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__50:
			case T__51:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 232;
				simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 235;
				Match(T__16);
				State = 236;
				elseBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(T__17);
			State = 240;
			expr(0);
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				{
				State = 241;
				block();
				}
				break;
			case T__5:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__23:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__50:
			case T__51:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 242;
				simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(T__18);
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 246;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(T__19);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 250;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCaseContext defaultCase() {
			return GetRuleContext<DefaultCaseContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(T__20);
			State = 254;
			expr(0);
			State = 255;
			Match(T__21);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 256;
				caseStatement();
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 262;
				defaultCase();
				}
			}

			State = 265;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForClauseContext forClause() {
			return GetRuleContext<ForClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeContext forRange() {
			return GetRuleContext<ForRangeContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(T__23);
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 268;
				forCondition();
				}
				break;
			case 2:
				{
				State = 269;
				forClause();
				}
				break;
			case 3:
				{
				State = 270;
				forRange();
				}
				break;
			}
			State = 273;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 42, RULE_forCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GoLangParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GoLangParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitStmtContext initStmt() {
			return GetRuleContext<InitStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostStmtContext postStmt() {
			return GetRuleContext<PostStmtContext>(0);
		}
		public ForClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForClauseContext forClause() {
		ForClauseContext _localctx = new ForClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_forClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 277;
				initStmt();
				State = 278;
				Match(SEMICOLON);
				}
				break;
			}
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 282;
				expr(0);
				}
			}

			State = 285;
			Match(SEMICOLON);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & 571979125862957057L) != 0)) {
				{
				State = 286;
				postStmt();
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 287;
					Match(SEMICOLON);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GoLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GoLangParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeContext forRange() {
		ForRangeContext _localctx = new ForRangeContext(Context, State);
		EnterRule(_localctx, 46, RULE_forRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(ID);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 293;
				Match(T__7);
				State = 294;
				Match(ID);
				}
			}

			State = 297;
			Match(T__3);
			State = 298;
			Match(T__24);
			State = 299;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitDeclarationContext implicitDeclaration() {
			return GetRuleContext<ImplicitDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		public InitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitStmtContext initStmt() {
		InitStmtContext _localctx = new InitStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_initStmt);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				varDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				implicitDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 304;
				compoundAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStatementContext incDecStatement() {
			return GetRuleContext<IncDecStatementContext>(0);
		}
		public PostStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostStmtContext postStmt() {
		PostStmtContext _localctx = new PostStmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_postStmt);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				compoundAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 309;
				incDecStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(T__25);
			State = 313;
			expr(0);
			State = 314;
			Match(T__26);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346361913293L) != 0)) {
				{
				{
				State = 315;
				statement();
				}
				}
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseContext defaultCase() {
		DefaultCaseContext _localctx = new DefaultCaseContext(Context, State);
		EnterRule(_localctx, 54, RULE_defaultCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(T__27);
			State = 322;
			Match(T__26);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346361913293L) != 0)) {
				{
				{
				State = 323;
				statement();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(T__21);
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -140034346361913293L) != 0)) {
				{
				{
				State = 330;
				statement();
				}
				}
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 336;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_elseBlock);
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340;
				simpleStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SlicesIndexContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SlicesIndexContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlicesIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public VariableContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringsJoinContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StringsJoinContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringsJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvokeLiteralContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public InvokeLiteralContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GoLangParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedSliceInitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public TypedSliceInitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconvAtoiContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StrconvAtoiContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconvAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GoLangParser.INT, 0); }
		public NumberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GoLangParser.BOOL, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconvParseFloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StrconvParseFloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconvParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvokeMethodLiteralContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvokeMethodContext invokeMethod() {
			return GetRuleContext<InvokeMethodContext>(0);
		}
		public InvokeMethodLiteralContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeMethodLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IndexAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReflectTypeOfContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReflectTypeOfContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReflectTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilContext : ExprContext {
		public NilContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GoLangParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppendContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit() {
			return GetRuleContext<SliceInitContext>(0);
		}
		public AppendContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LenContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LenContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public FieldAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(GoLangParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 344;
				Match(T__39);
				State = 345;
				expr(23);
				}
				break;
			case 2:
				{
				_localctx = new NegContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 346;
				Match(T__32);
				State = 347;
				expr(22);
				}
				break;
			case 3:
				{
				_localctx = new LenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 348;
				Match(T__40);
				State = 349;
				Match(T__5);
				State = 350;
				expr(0);
				State = 351;
				Match(T__6);
				}
				break;
			case 4:
				{
				_localctx = new AppendContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 353;
				Match(T__41);
				State = 354;
				Match(T__5);
				State = 355;
				expr(0);
				State = 356;
				Match(T__7);
				State = 359;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__5:
				case T__32:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__44:
				case T__45:
				case T__46:
				case T__49:
				case T__57:
				case INT:
				case FLOAT:
				case STRING:
				case RUNE:
				case BOOL:
				case ID:
					{
					State = 357;
					expr(0);
					}
					break;
				case T__21:
					{
					State = 358;
					sliceInit();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 361;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new StringsJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				Match(T__42);
				State = 364;
				Match(T__5);
				State = 365;
				expr(0);
				State = 366;
				Match(T__7);
				State = 367;
				expr(0);
				State = 368;
				Match(T__6);
				}
				break;
			case 6:
				{
				_localctx = new SlicesIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370;
				Match(T__43);
				State = 371;
				Match(T__5);
				State = 372;
				expr(0);
				State = 373;
				Match(T__7);
				State = 374;
				expr(0);
				State = 375;
				Match(T__6);
				}
				break;
			case 7:
				{
				_localctx = new StrconvAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 377;
				Match(T__44);
				State = 378;
				Match(T__5);
				State = 379;
				expr(0);
				State = 380;
				Match(T__6);
				}
				break;
			case 8:
				{
				_localctx = new StrconvParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382;
				Match(T__45);
				State = 383;
				Match(T__5);
				State = 384;
				expr(0);
				State = 385;
				Match(T__6);
				}
				break;
			case 9:
				{
				_localctx = new ReflectTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 387;
				Match(T__46);
				State = 388;
				Match(T__5);
				State = 389;
				expr(0);
				State = 390;
				Match(T__6);
				}
				break;
			case 10:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				Match(INT);
				}
				break;
			case 11:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 393;
				Match(FLOAT);
				}
				break;
			case 12:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394;
				Match(STRING);
				}
				break;
			case 13:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 395;
				Match(RUNE);
				}
				break;
			case 14:
				{
				_localctx = new InvokeLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396;
				invoke();
				}
				break;
			case 15:
				{
				_localctx = new InvokeMethodLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 397;
				invokeMethod();
				}
				break;
			case 16:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 398;
				Match(BOOL);
				}
				break;
			case 17:
				{
				_localctx = new NilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 399;
				Match(T__49);
				}
				break;
			case 18:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 400;
				Match(ID);
				}
				break;
			case 19:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 401;
				Match(T__5);
				State = 402;
				expr(0);
				State = 403;
				Match(T__6);
				}
				break;
			case 20:
				{
				_localctx = new TypedSliceInitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 405;
				arrayType();
				State = 406;
				sliceInit();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 436;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 410;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 411;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3758096384L) != 0)) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 412;
						expr(28);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 413;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 414;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 415;
						expr(27);
						}
						break;
					case 3:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 416;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 417;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__33 || _la==T__34) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 418;
						expr(26);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 419;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 420;
						((ComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1030792151040L) != 0)) ) {
							((ComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 421;
						expr(25);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 422;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 423;
						Match(T__47);
						State = 424;
						expr(14);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 425;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 426;
						Match(T__48);
						State = 427;
						expr(13);
						}
						break;
					case 7:
						{
						_localctx = new FieldAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 428;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 429;
						Match(T__8);
						State = 430;
						Match(ID);
						}
						break;
					case 8:
						{
						_localctx = new IndexAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 431;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 432;
						Match(T__9);
						State = 433;
						expr(0);
						State = 434;
						Match(T__10);
						}
						break;
					}
					} 
				}
				State = 440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SliceInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedSliceInitContext nestedSliceInit() {
			return GetRuleContext<NestedSliceInitContext>(0);
		}
		public SliceInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceInitContext sliceInit() {
		SliceInitContext _localctx = new SliceInitContext(Context, State);
		EnterRule(_localctx, 62, RULE_sliceInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(T__21);
			State = 444;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__32:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__49:
			case T__57:
			case INT:
			case FLOAT:
			case STRING:
			case RUNE:
			case BOOL:
			case ID:
				{
				State = 442;
				exprList();
				}
				break;
			case T__21:
				{
				State = 443;
				nestedSliceInit();
				}
				break;
			case T__22:
				break;
			default:
				break;
			}
			State = 446;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedSliceInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext[] sliceInit() {
			return GetRuleContexts<SliceInitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceInitContext sliceInit(int i) {
			return GetRuleContext<SliceInitContext>(i);
		}
		public NestedSliceInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedSliceInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedSliceInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedSliceInitContext nestedSliceInit() {
		NestedSliceInitContext _localctx = new NestedSliceInitContext(Context, State);
		EnterRule(_localctx, 64, RULE_nestedSliceInit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			sliceInit();
			State = 453;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 449;
					Match(T__7);
					State = 450;
					sliceInit();
					}
					} 
				}
				State = 455;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 456;
				Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(T__50);
			State = 460;
			Match(T__5);
			State = 461;
			expr(0);
			State = 462;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GoLangParser.SEMICOLON, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(T__51);
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 465;
				expr(0);
				}
				break;
			}
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 468;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_type);
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				baseType();
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 2);
				{
				State = 472;
				arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GoLangParser.ID, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 2079L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(T__57);
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__57:
				{
				State = 478;
				arrayType();
				}
				break;
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case ID:
				{
				State = 479;
				baseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoLangVisitor<TResult> typedVisitor = visitor as IGoLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 76, RULE_exprList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			expr(0);
			State = 487;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 483;
					Match(T__7);
					State = 484;
					expr(0);
					}
					} 
				}
				State = 489;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 490;
				Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 27);
		case 1: return Precpred(Context, 26);
		case 2: return Precpred(Context, 25);
		case 3: return Precpred(Context, 24);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 28);
		case 7: return Precpred(Context, 14);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,68,494,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,4,0,80,8,0,11,0,12,0,81,1,1,1,1,3,1,
		86,8,1,1,1,1,1,3,1,90,8,1,1,1,1,1,1,1,3,1,95,8,1,1,2,1,2,3,2,99,8,2,1,
		2,1,2,3,2,103,8,2,1,2,1,2,3,2,107,8,2,1,2,1,2,3,2,111,8,2,1,2,1,2,3,2,
		115,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,125,8,2,1,2,1,2,3,2,129,8,
		2,1,2,3,2,132,8,2,1,3,1,3,1,3,3,3,137,8,3,1,3,1,3,1,3,3,3,142,8,3,3,3,
		144,8,3,1,3,1,3,1,3,1,3,1,3,3,3,151,8,3,1,4,1,4,1,4,1,4,3,4,157,8,4,1,
		4,1,4,3,4,161,8,4,1,4,1,4,1,5,1,5,1,5,5,5,168,8,5,10,5,12,5,171,9,5,1,
		6,1,6,1,6,1,7,1,7,1,7,3,7,179,8,7,1,7,1,7,1,8,1,8,1,8,5,8,186,8,8,10,8,
		12,8,189,9,8,1,9,1,9,1,9,1,9,1,9,3,9,196,8,9,1,9,1,9,1,10,1,10,1,10,1,
		10,3,10,204,8,10,1,11,1,11,1,11,1,11,3,11,210,8,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,3,11,219,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
		14,1,15,1,15,1,15,1,15,3,15,234,8,15,1,15,1,15,3,15,238,8,15,1,16,1,16,
		1,16,1,16,3,16,244,8,16,1,17,1,17,3,17,248,8,17,1,18,1,18,3,18,252,8,18,
		1,19,1,19,1,19,1,19,5,19,258,8,19,10,19,12,19,261,9,19,1,19,3,19,264,8,
		19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,272,8,20,1,20,1,20,1,21,1,21,1,22,
		1,22,1,22,3,22,281,8,22,1,22,3,22,284,8,22,1,22,1,22,1,22,3,22,289,8,22,
		3,22,291,8,22,1,23,1,23,1,23,3,23,296,8,23,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,3,24,306,8,24,1,25,1,25,1,25,3,25,311,8,25,1,26,1,26,1,26,
		1,26,5,26,317,8,26,10,26,12,26,320,9,26,1,27,1,27,1,27,5,27,325,8,27,10,
		27,12,27,328,9,27,1,28,1,28,5,28,332,8,28,10,28,12,28,335,9,28,1,28,1,
		28,1,29,1,29,1,29,3,29,342,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,360,8,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,3,30,409,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,5,30,437,8,30,10,30,12,30,440,9,30,1,31,1,31,1,31,3,31,445,8,
		31,1,31,1,31,1,32,1,32,1,32,5,32,452,8,32,10,32,12,32,455,9,32,1,32,3,
		32,458,8,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,467,8,34,1,34,3,34,
		470,8,34,1,35,1,35,3,35,474,8,35,1,36,1,36,1,37,1,37,1,37,3,37,481,8,37,
		1,38,1,38,1,38,5,38,486,8,38,10,38,12,38,489,9,38,1,38,3,38,492,8,38,1,
		38,0,1,60,39,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,0,8,1,0,1,2,1,0,
		12,13,1,0,14,15,1,0,29,31,1,0,32,33,1,0,34,35,1,0,36,39,2,0,53,57,64,64,
		556,0,79,1,0,0,0,2,94,1,0,0,0,4,131,1,0,0,0,6,150,1,0,0,0,8,152,1,0,0,
		0,10,164,1,0,0,0,12,172,1,0,0,0,14,175,1,0,0,0,16,182,1,0,0,0,18,190,1,
		0,0,0,20,199,1,0,0,0,22,218,1,0,0,0,24,220,1,0,0,0,26,224,1,0,0,0,28,227,
		1,0,0,0,30,229,1,0,0,0,32,239,1,0,0,0,34,245,1,0,0,0,36,249,1,0,0,0,38,
		253,1,0,0,0,40,267,1,0,0,0,42,275,1,0,0,0,44,280,1,0,0,0,46,292,1,0,0,
		0,48,305,1,0,0,0,50,310,1,0,0,0,52,312,1,0,0,0,54,321,1,0,0,0,56,329,1,
		0,0,0,58,341,1,0,0,0,60,408,1,0,0,0,62,441,1,0,0,0,64,448,1,0,0,0,66,459,
		1,0,0,0,68,464,1,0,0,0,70,473,1,0,0,0,72,475,1,0,0,0,74,477,1,0,0,0,76,
		482,1,0,0,0,78,80,3,2,1,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,
		82,1,0,0,0,82,1,1,0,0,0,83,85,3,6,3,0,84,86,5,65,0,0,85,84,1,0,0,0,85,
		86,1,0,0,0,86,95,1,0,0,0,87,89,3,20,10,0,88,90,5,65,0,0,89,88,1,0,0,0,
		89,90,1,0,0,0,90,95,1,0,0,0,91,95,3,8,4,0,92,95,3,4,2,0,93,95,3,56,28,
		0,94,83,1,0,0,0,94,87,1,0,0,0,94,91,1,0,0,0,94,92,1,0,0,0,94,93,1,0,0,
		0,95,3,1,0,0,0,96,98,3,28,14,0,97,99,5,65,0,0,98,97,1,0,0,0,98,99,1,0,
		0,0,99,132,1,0,0,0,100,102,3,22,11,0,101,103,5,65,0,0,102,101,1,0,0,0,
		102,103,1,0,0,0,103,132,1,0,0,0,104,106,3,24,12,0,105,107,5,65,0,0,106,
		105,1,0,0,0,106,107,1,0,0,0,107,132,1,0,0,0,108,110,3,26,13,0,109,111,
		5,65,0,0,110,109,1,0,0,0,110,111,1,0,0,0,111,132,1,0,0,0,112,114,3,66,
		33,0,113,115,5,65,0,0,114,113,1,0,0,0,114,115,1,0,0,0,115,132,1,0,0,0,
		116,132,3,30,15,0,117,132,3,32,16,0,118,132,3,34,17,0,119,132,3,36,18,
		0,120,132,3,38,19,0,121,132,3,68,34,0,122,124,3,14,7,0,123,125,5,65,0,
		0,124,123,1,0,0,0,124,125,1,0,0,0,125,132,1,0,0,0,126,128,3,18,9,0,127,
		129,5,65,0,0,128,127,1,0,0,0,128,129,1,0,0,0,129,132,1,0,0,0,130,132,3,
		40,20,0,131,96,1,0,0,0,131,100,1,0,0,0,131,104,1,0,0,0,131,108,1,0,0,0,
		131,112,1,0,0,0,131,116,1,0,0,0,131,117,1,0,0,0,131,118,1,0,0,0,131,119,
		1,0,0,0,131,120,1,0,0,0,131,121,1,0,0,0,131,122,1,0,0,0,131,126,1,0,0,
		0,131,130,1,0,0,0,132,5,1,0,0,0,133,134,7,0,0,0,134,136,5,64,0,0,135,137,
		3,70,35,0,136,135,1,0,0,0,136,137,1,0,0,0,137,143,1,0,0,0,138,141,5,3,
		0,0,139,142,3,60,30,0,140,142,3,62,31,0,141,139,1,0,0,0,141,140,1,0,0,
		0,142,144,1,0,0,0,143,138,1,0,0,0,143,144,1,0,0,0,144,151,1,0,0,0,145,
		146,5,64,0,0,146,147,5,4,0,0,147,148,3,70,35,0,148,149,3,62,31,0,149,151,
		1,0,0,0,150,133,1,0,0,0,150,145,1,0,0,0,151,7,1,0,0,0,152,153,5,5,0,0,
		153,154,5,64,0,0,154,156,5,6,0,0,155,157,3,10,5,0,156,155,1,0,0,0,156,
		157,1,0,0,0,157,158,1,0,0,0,158,160,5,7,0,0,159,161,3,70,35,0,160,159,
		1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,3,56,28,0,163,9,1,0,0,
		0,164,169,3,12,6,0,165,166,5,8,0,0,166,168,3,12,6,0,167,165,1,0,0,0,168,
		171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,11,1,0,0,0,171,169,1,0,
		0,0,172,173,5,64,0,0,173,174,3,70,35,0,174,13,1,0,0,0,175,176,5,64,0,0,
		176,178,5,6,0,0,177,179,3,16,8,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,
		1,0,0,0,180,181,5,7,0,0,181,15,1,0,0,0,182,187,3,60,30,0,183,184,5,8,0,
		0,184,186,3,60,30,0,185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,
		188,1,0,0,0,188,17,1,0,0,0,189,187,1,0,0,0,190,191,5,64,0,0,191,192,5,
		9,0,0,192,193,5,64,0,0,193,195,5,6,0,0,194,196,3,16,8,0,195,194,1,0,0,
		0,195,196,1,0,0,0,196,197,1,0,0,0,197,198,5,7,0,0,198,19,1,0,0,0,199,200,
		5,64,0,0,200,203,5,4,0,0,201,204,3,60,30,0,202,204,3,62,31,0,203,201,1,
		0,0,0,203,202,1,0,0,0,204,21,1,0,0,0,205,206,5,64,0,0,206,209,5,3,0,0,
		207,210,3,60,30,0,208,210,3,62,31,0,209,207,1,0,0,0,209,208,1,0,0,0,210,
		219,1,0,0,0,211,212,3,60,30,0,212,213,5,10,0,0,213,214,3,60,30,0,214,215,
		5,11,0,0,215,216,5,3,0,0,216,217,3,60,30,0,217,219,1,0,0,0,218,205,1,0,
		0,0,218,211,1,0,0,0,219,23,1,0,0,0,220,221,5,64,0,0,221,222,7,1,0,0,222,
		223,3,60,30,0,223,25,1,0,0,0,224,225,5,64,0,0,225,226,7,2,0,0,226,27,1,
		0,0,0,227,228,3,60,30,0,228,29,1,0,0,0,229,230,5,16,0,0,230,233,3,60,30,
		0,231,234,3,56,28,0,232,234,3,4,2,0,233,231,1,0,0,0,233,232,1,0,0,0,234,
		237,1,0,0,0,235,236,5,17,0,0,236,238,3,58,29,0,237,235,1,0,0,0,237,238,
		1,0,0,0,238,31,1,0,0,0,239,240,5,18,0,0,240,243,3,60,30,0,241,244,3,56,
		28,0,242,244,3,4,2,0,243,241,1,0,0,0,243,242,1,0,0,0,244,33,1,0,0,0,245,
		247,5,19,0,0,246,248,5,65,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,35,1,
		0,0,0,249,251,5,20,0,0,250,252,5,65,0,0,251,250,1,0,0,0,251,252,1,0,0,
		0,252,37,1,0,0,0,253,254,5,21,0,0,254,255,3,60,30,0,255,259,5,22,0,0,256,
		258,3,52,26,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,
		1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,262,264,3,54,27,0,263,262,1,0,
		0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,5,23,0,0,266,39,1,0,0,0,267,
		271,5,24,0,0,268,272,3,42,21,0,269,272,3,44,22,0,270,272,3,46,23,0,271,
		268,1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,273,1,0,0,0,273,274,3,
		56,28,0,274,41,1,0,0,0,275,276,3,60,30,0,276,43,1,0,0,0,277,278,3,48,24,
		0,278,279,5,65,0,0,279,281,1,0,0,0,280,277,1,0,0,0,280,281,1,0,0,0,281,
		283,1,0,0,0,282,284,3,60,30,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,
		1,0,0,0,285,290,5,65,0,0,286,288,3,50,25,0,287,289,5,65,0,0,288,287,1,
		0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,286,1,0,0,0,290,291,1,0,0,0,
		291,45,1,0,0,0,292,295,5,64,0,0,293,294,5,8,0,0,294,296,5,64,0,0,295,293,
		1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,5,4,0,0,298,299,5,25,0,
		0,299,300,3,60,30,0,300,47,1,0,0,0,301,306,3,6,3,0,302,306,3,20,10,0,303,
		306,3,22,11,0,304,306,3,24,12,0,305,301,1,0,0,0,305,302,1,0,0,0,305,303,
		1,0,0,0,305,304,1,0,0,0,306,49,1,0,0,0,307,311,3,22,11,0,308,311,3,24,
		12,0,309,311,3,26,13,0,310,307,1,0,0,0,310,308,1,0,0,0,310,309,1,0,0,0,
		311,51,1,0,0,0,312,313,5,26,0,0,313,314,3,60,30,0,314,318,5,27,0,0,315,
		317,3,2,1,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,
		0,0,0,319,53,1,0,0,0,320,318,1,0,0,0,321,322,5,28,0,0,322,326,5,27,0,0,
		323,325,3,2,1,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,
		1,0,0,0,327,55,1,0,0,0,328,326,1,0,0,0,329,333,5,22,0,0,330,332,3,2,1,
		0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,
		336,1,0,0,0,335,333,1,0,0,0,336,337,5,23,0,0,337,57,1,0,0,0,338,342,3,
		30,15,0,339,342,3,56,28,0,340,342,3,4,2,0,341,338,1,0,0,0,341,339,1,0,
		0,0,341,340,1,0,0,0,342,59,1,0,0,0,343,344,6,30,-1,0,344,345,5,40,0,0,
		345,409,3,60,30,23,346,347,5,33,0,0,347,409,3,60,30,22,348,349,5,41,0,
		0,349,350,5,6,0,0,350,351,3,60,30,0,351,352,5,7,0,0,352,409,1,0,0,0,353,
		354,5,42,0,0,354,355,5,6,0,0,355,356,3,60,30,0,356,359,5,8,0,0,357,360,
		3,60,30,0,358,360,3,62,31,0,359,357,1,0,0,0,359,358,1,0,0,0,360,361,1,
		0,0,0,361,362,5,7,0,0,362,409,1,0,0,0,363,364,5,43,0,0,364,365,5,6,0,0,
		365,366,3,60,30,0,366,367,5,8,0,0,367,368,3,60,30,0,368,369,5,7,0,0,369,
		409,1,0,0,0,370,371,5,44,0,0,371,372,5,6,0,0,372,373,3,60,30,0,373,374,
		5,8,0,0,374,375,3,60,30,0,375,376,5,7,0,0,376,409,1,0,0,0,377,378,5,45,
		0,0,378,379,5,6,0,0,379,380,3,60,30,0,380,381,5,7,0,0,381,409,1,0,0,0,
		382,383,5,46,0,0,383,384,5,6,0,0,384,385,3,60,30,0,385,386,5,7,0,0,386,
		409,1,0,0,0,387,388,5,47,0,0,388,389,5,6,0,0,389,390,3,60,30,0,390,391,
		5,7,0,0,391,409,1,0,0,0,392,409,5,59,0,0,393,409,5,60,0,0,394,409,5,61,
		0,0,395,409,5,62,0,0,396,409,3,14,7,0,397,409,3,18,9,0,398,409,5,63,0,
		0,399,409,5,50,0,0,400,409,5,64,0,0,401,402,5,6,0,0,402,403,3,60,30,0,
		403,404,5,7,0,0,404,409,1,0,0,0,405,406,3,74,37,0,406,407,3,62,31,0,407,
		409,1,0,0,0,408,343,1,0,0,0,408,346,1,0,0,0,408,348,1,0,0,0,408,353,1,
		0,0,0,408,363,1,0,0,0,408,370,1,0,0,0,408,377,1,0,0,0,408,382,1,0,0,0,
		408,387,1,0,0,0,408,392,1,0,0,0,408,393,1,0,0,0,408,394,1,0,0,0,408,395,
		1,0,0,0,408,396,1,0,0,0,408,397,1,0,0,0,408,398,1,0,0,0,408,399,1,0,0,
		0,408,400,1,0,0,0,408,401,1,0,0,0,408,405,1,0,0,0,409,438,1,0,0,0,410,
		411,10,27,0,0,411,412,7,3,0,0,412,437,3,60,30,28,413,414,10,26,0,0,414,
		415,7,4,0,0,415,437,3,60,30,27,416,417,10,25,0,0,417,418,7,5,0,0,418,437,
		3,60,30,26,419,420,10,24,0,0,420,421,7,6,0,0,421,437,3,60,30,25,422,423,
		10,13,0,0,423,424,5,48,0,0,424,437,3,60,30,14,425,426,10,12,0,0,426,427,
		5,49,0,0,427,437,3,60,30,13,428,429,10,28,0,0,429,430,5,9,0,0,430,437,
		5,64,0,0,431,432,10,14,0,0,432,433,5,10,0,0,433,434,3,60,30,0,434,435,
		5,11,0,0,435,437,1,0,0,0,436,410,1,0,0,0,436,413,1,0,0,0,436,416,1,0,0,
		0,436,419,1,0,0,0,436,422,1,0,0,0,436,425,1,0,0,0,436,428,1,0,0,0,436,
		431,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,61,1,0,
		0,0,440,438,1,0,0,0,441,444,5,22,0,0,442,445,3,76,38,0,443,445,3,64,32,
		0,444,442,1,0,0,0,444,443,1,0,0,0,444,445,1,0,0,0,445,446,1,0,0,0,446,
		447,5,23,0,0,447,63,1,0,0,0,448,453,3,62,31,0,449,450,5,8,0,0,450,452,
		3,62,31,0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,
		0,0,454,457,1,0,0,0,455,453,1,0,0,0,456,458,5,8,0,0,457,456,1,0,0,0,457,
		458,1,0,0,0,458,65,1,0,0,0,459,460,5,51,0,0,460,461,5,6,0,0,461,462,3,
		60,30,0,462,463,5,7,0,0,463,67,1,0,0,0,464,466,5,52,0,0,465,467,3,60,30,
		0,466,465,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,470,5,65,0,0,469,
		468,1,0,0,0,469,470,1,0,0,0,470,69,1,0,0,0,471,474,3,72,36,0,472,474,3,
		74,37,0,473,471,1,0,0,0,473,472,1,0,0,0,474,71,1,0,0,0,475,476,7,7,0,0,
		476,73,1,0,0,0,477,480,5,58,0,0,478,481,3,74,37,0,479,481,3,72,36,0,480,
		478,1,0,0,0,480,479,1,0,0,0,481,75,1,0,0,0,482,487,3,60,30,0,483,484,5,
		8,0,0,484,486,3,60,30,0,485,483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,
		0,487,488,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,490,492,5,8,0,0,491,
		490,1,0,0,0,491,492,1,0,0,0,492,77,1,0,0,0,57,81,85,89,94,98,102,106,110,
		114,124,128,131,136,141,143,150,156,160,169,178,187,195,203,209,218,233,
		237,243,247,251,259,263,271,280,283,288,290,295,305,310,318,326,333,341,
		359,408,436,438,444,453,457,466,469,473,480,487,491
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
